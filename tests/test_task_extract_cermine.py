import os
import json
import jsonschema
import datetime
import unittest

from reflink.process.extract import cermine, grobid, scienceparse

data_directory = 'tests/data'

def article1(ext):
    return '{}.{}'.format(
        os.path.join(data_directory, '1702.07336'), ext
    )


def article2(ext):
    return '{}.{}'.format(
        os.path.join(data_directory, '1704.01689v1'), ext
    )


def mock_full_dock(references):
    # there is no public way to format a document correctly
    # (ReferenceStoreSession._prepare) so here it is duplicated for now
    now = datetime.datetime.now().isoformat()
    data = {
        'document': 'arxiv:1703.00020',
        'references': references,
        'created': now,
        'updated': now
    }
    return data


def ordered(obj):
    """ A function for comparing json objects """
    if isinstance(obj, dict):
        return sorted((k, ordered(v)) for k, v in obj.items())
    elif isinstance(obj, list):
        return sorted(ordered(x) for x in obj)
    else:
        return obj


class TestCERMINEExtractor(unittest.TestCase):
    def test_cxml_to_json_formatter(self):
        # NOTE -- file generated by:
        #   json.dump(
        #       d, open('1702.07336.cermine.json', 'w'),
        #       indent=4, sort_keys=True
        #   )
        cxml_document_path = article1('cermxml')
        json_document_path = article1('cermine.json')

        doc_test = cermine.convert_cxml_json(cxml_document_path)
        doc_orig = json.load(open(json_document_path))

        self.assertEqual(ordered(doc_test), ordered(doc_orig))

    def test_cxml_json_schema(self):
        cxml_document_path = article1('cermxml')
        jsondoc = cermine.convert_cxml_json(cxml_document_path)

        schema_path = 'schema/ExtractedReference.json'
        schemadoc = json.load(open(schema_path))
        for ref in jsondoc:
            jsonschema.validate(ref, schemadoc)


class TestGROBIDExtractor(unittest.TestCase):
    def test_json_formatter(self):
        gxml_path = article2('grobid.xml')
        json_path = article2('grobid.json')

        doc_test = grobid.format_grobid_output(open(gxml_path, 'rb').read())
        doc_orig = json.load(open(json_path))

        self.assertEqual(ordered(doc_test), ordered(doc_orig))

    def test_schema(self):
        gxml_path = article2('grobid.xml')
        jsondoc = grobid.format_grobid_output(open(gxml_path, 'rb').read())

        schema_path = 'schema/ExtractedReference.json'
        schemadoc = json.load(open(schema_path))
        for ref in jsondoc:
            jsonschema.validate(ref, schemadoc)


class TestScienceParseExtractor(unittest.TestCase):
    def test_json_formatter(self):
        json1_path = article2('scienceparse-raw.json')
        json2_path = article2('scienceparse-formatted.json')

        doc_test = scienceparse.format_scienceparse_output(
            json.load(open(json1_path))
        )
        doc_orig = json.load(open(json2_path))

        self.assertEqual(ordered(doc_test), ordered(doc_orig))

    def test_schema(self):
        json_path = article2('scienceparse-raw.json')
        jsondoc = scienceparse.format_scienceparse_output(
            json.load(open(json_path))
        )

        schema_path = 'schema/ExtractedReference.json'
        schemadoc = json.load(open(schema_path))
        for ref in jsondoc:
            jsonschema.validate(ref, schemadoc)

if __name__ == '__main__':
    unittest.main()
