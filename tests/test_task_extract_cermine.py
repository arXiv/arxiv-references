import json
import jsonschema
import datetime
import subprocess
import unittest
from unittest import mock
from moto import mock_dynamodb2

from reflink.services import data_store
from reflink.process.extract import cermine


def mock_full_dock(references):
    # there is no public way to format a document correctly
    # (ReferenceStoreSession._prepare) so here it is duplicated for now
    now = datetime.datetime.now().isoformat()
    data = {
        'document': 'arxiv:1703.00020',
        'references': references,
        'created': now,
        'updated': now
    }
    return data


def ordered(obj):
    """ A function for comparing json objects """
    if isinstance(obj, dict):
        return sorted((k, ordered(v)) for k, v in obj.items())
    elif isinstance(obj, list):
        return sorted(ordered(x) for x in obj)
    else:
        return obj


class TestCERMINEExtractor(unittest.TestCase):
    def test_cxml_to_json_formatter(self):
        # NOTE -- file generated by: json.dump(d, open('1702.07336.cermine.json', 'w'), indent=4, sort_keys=True)
        cxml_document_path = 'tests/data/1702.07336.cermxml'
        json_document_path = 'tests/data/1702.07336.cermine.json'

        doc_test = cermine.convert_cxml_json(cxml_document_path)
        doc_orig = json.load(open(json_document_path))

        self.assertEqual(ordered(doc_test), ordered(doc_orig))

    @mock_dynamodb2
    def test_cxml_json_schema(self):
        cxml_document_path = 'tests/data/1702.07336.cermxml'
        jsondoc = cermine.convert_cxml_json(cxml_document_path)

        # create the full document using the data_store
        fulldoc = mock_full_dock(jsondoc)

        schema_path = 'schema/ExtractedReference.json'
        schemadoc = json.load(open(schema_path))
        for ref in jsondoc:
            jsonschema.validate(ref, schemadoc)

    def test_pdf_not_found(self):
        pdf_document_path = 'tests/data/1702.07335.pdf'
        with self.assertRaises(FileNotFoundError):
            cermine.extract_references(pdf_document_path)


if __name__ == '__main__':
    unittest.main()
